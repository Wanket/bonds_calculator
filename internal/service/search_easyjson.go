// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package service

import (
	moex "bonds_calculator/internal/model/moex"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD4176298DecodeBondsCalculatorInternalService(in *jlexer.Lexer, out *SearchResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(SearchResults, 0, 0)
			} else {
				*out = SearchResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 SearchResult
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeBondsCalculatorInternalService(out *jwriter.Writer, in SearchResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeBondsCalculatorInternalService(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeBondsCalculatorInternalService(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeBondsCalculatorInternalService(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeBondsCalculatorInternalService(l, v)
}
func easyjsonD4176298DecodeBondsCalculatorInternalService1(in *jlexer.Lexer, out *SearchResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Bond":
			easyjsonD4176298DecodeBondsCalculatorInternalModelMoex(in, &out.Bond)
		case "MaturityIncome":
			(out.MaturityIncome).UnmarshalEasyJSON(in)
		case "CurrentIncome":
			(out.CurrentIncome).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeBondsCalculatorInternalService1(out *jwriter.Writer, in SearchResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Bond\":"
		out.RawString(prefix[1:])
		easyjsonD4176298EncodeBondsCalculatorInternalModelMoex(out, in.Bond)
	}
	{
		const prefix string = ",\"MaturityIncome\":"
		out.RawString(prefix)
		(in.MaturityIncome).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"CurrentIncome\":"
		out.RawString(prefix)
		(in.CurrentIncome).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeBondsCalculatorInternalService1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeBondsCalculatorInternalService1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeBondsCalculatorInternalService1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeBondsCalculatorInternalService1(l, v)
}
func easyjsonD4176298DecodeBondsCalculatorInternalModelMoex(in *jlexer.Lexer, out *moex.Bond) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "CurrentPrice":
			out.CurrentPrice = float64(in.Float64())
		case "ShortName":
			out.ShortName = string(in.String())
		case "Coupon":
			out.Coupon = float64(in.Float64())
		case "NextCoupon":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NextCoupon).UnmarshalJSON(data))
			}
		case "AccCoupon":
			out.AccCoupon = float64(in.Float64())
		case "PrevPrice":
			out.PrevPrice = float64(in.Float64())
		case "Value":
			out.Value = float64(in.Float64())
		case "CouponPeriod":
			out.CouponPeriod = uint(in.Uint())
		case "PriceStep":
			out.PriceStep = float64(in.Float64())
		case "CouponPercent":
			(out.CouponPercent).UnmarshalEasyJSON(in)
		case "EndDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeBondsCalculatorInternalModelMoex(out *jwriter.Writer, in moex.Bond) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"CurrentPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.CurrentPrice))
	}
	{
		const prefix string = ",\"ShortName\":"
		out.RawString(prefix)
		out.String(string(in.ShortName))
	}
	{
		const prefix string = ",\"Coupon\":"
		out.RawString(prefix)
		out.Float64(float64(in.Coupon))
	}
	{
		const prefix string = ",\"NextCoupon\":"
		out.RawString(prefix)
		out.Raw((in.NextCoupon).MarshalJSON())
	}
	{
		const prefix string = ",\"AccCoupon\":"
		out.RawString(prefix)
		out.Float64(float64(in.AccCoupon))
	}
	{
		const prefix string = ",\"PrevPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.PrevPrice))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"CouponPeriod\":"
		out.RawString(prefix)
		out.Uint(uint(in.CouponPeriod))
	}
	{
		const prefix string = ",\"PriceStep\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceStep))
	}
	{
		const prefix string = ",\"CouponPercent\":"
		out.RawString(prefix)
		(in.CouponPercent).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"EndDate\":"
		out.RawString(prefix)
		out.Raw((in.EndDate).MarshalJSON())
	}
	out.RawByte('}')
}
